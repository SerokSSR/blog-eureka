<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>最短路 on Eureka Demo</title>
    <link>https://www.atsnow.tk/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/</link>
    <description>Recent content in 最短路 on Eureka Demo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.wangchucheng.com/&#34;&gt;C. Wang&lt;/a&gt; and &lt;a href=&#34;https://www.ruiqima.com/&#34;&gt;R. Ma&lt;/a&gt;</copyright><atom:link href="https://www.atsnow.tk/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>图论</title>
      <link>https://www.atsnow.tk/graph-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.atsnow.tk/graph-theory/</guid>
      <description>图论 图论算法一般都是揉在一起的，很难单独把算法拆开讲，所以直接上题目吧。分类是大致分的，其实有很多是交叉的。 二叉树 二叉树的遍历有三种，分别为前序遍历，</description>
    </item>
    
    <item>
      <title>网络流：Dijkstra 求费用流</title>
      <link>https://www.atsnow.tk/network-flow-dijkstra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.atsnow.tk/network-flow-dijkstra/</guid>
      <description>网络流：Dijkstra 求费用流 注：下文中的边权 $w$ 均表示费用 $f$。 Dijkstra 不能求有负权边的最短路，所以我们可以对网络 $G$ 中的每一个点设置一个势函数 $h(u)</description>
    </item>
    
    <item>
      <title>网络流：模板</title>
      <link>https://www.atsnow.tk/network-flow-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.atsnow.tk/network-flow-template/</guid>
      <description>网络流：模板 P3376 网络最大流（Dinic） #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;queue&amp;gt; using namespace std; const int N = 11000, M = 110000; const int INF = 0x7fffffff; struct node { int u, v, w, next; } e[M &amp;lt;&amp;lt; 1]; int cur[N], h[N], tot; int dfn[N], ans, n, m, s, t; void add(int u, int v, int w) { e[tot]</description>
    </item>
    
    <item>
      <title>网络流：消圈算法</title>
      <link>https://www.atsnow.tk/network-flow-deloop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.atsnow.tk/network-flow-deloop/</guid>
      <description>网络流：消圈算法 注：下文中的权均表示费用。 消圈定理 在某个流 $f$ 中，如果其残余网络中没有负圈（剩余流量为 $0$ 的边视为不存在），那它一定是当前流量下的最小费用</description>
    </item>
    
  </channel>
</rss>
